.TH FDC 1
.SH NAME
fdc \- Command-line client for the firmwared daemon
.SH SYNOPSIS
.B fdc
.I command
[\fICOMMAND_ARGUMENTS\fR]
.SH DESCRIPTION
.B fdc
is a thin bash client for
.BR firmwared ,
built around
.BR pomp-cli ,
which allows to send commands to
.B firmwared
and to wait for it's related answer.

.B fdc
works just on top of the
.B firmwared libpomp
protocol and offers no upper level service, but it is intended to have a
script-friendly output so that such services can easily by scripted.

.SH COMMANDS
The commands
.BR DROP ,
.BR GET_PROPERTY ,
.BR LIST ,
.BR PROPERTIES ,
.B SET_PROPERTY
and
.BR SHOW
work on a
.BR folder ,
this is why, the argument following the command name, must be the name of the
folder they must apply to.
.\" START OF COMMANDS SECTION - autogenerated section, do not edit
.\" generated with the command :
.\" for c in $(fdc commands | sed "s/ /\n/g" | sort); do fdc help $c | egrep -v "^Command " | sed "s/Synopsis:/.TP\n.B/g" | sed "s/Overview: /- /g"; done
.TP
.B COMMANDS
- List the different commands registered so far.
.TP
.B CONFIG_KEYS
- Lists all the config keys available.
.TP
.B DROP FOLDER IDENTIFIER
- Removes an entity from a folder.
if the entity is an instance, it must be in the READY state. It's pid 1 will be killed and it's run artifacts will be removed if FIRMWARED_PREVENT_REMOVAL isn't set to "y".
.TP
.B FOLDERS
- Asks the server to list the currently registered folders.
.TP
.B GET_CONFIG CONFIG_KEY
- Retrieves the value of the CONFIG_KEY configuration key.
The CONFIG_KEY is case insensitive. Use the CONFIG_KEYS command to list the available config keys to query.
.TP
.B GET_PROPERTY FOLDER ENTITY_IDENTIFIER PROPERTY_NAME
- Retrieves the value of the property PROPERTY for the entity whose name or sha1 is ENTITY_IDENTIFIER from the folder FOLDER.
If the property is an array, both indexed and non-indexed accesses are allowed. In the non indexed case, all the content of the array will be retrieved, in the indexed access case, one must suffix the property name with [i] to retrieve the i-th value.
.TP
.B HELP COMMAND
- Sends back a little help on the command COMMAND.
.TP
.B KILL INSTANCE_IDENTIFIER
- Kills a running instance.
Searches for the instance whose sha1 or name is INSTANCE_IDENTIFIER and kills it. All the processes are killed, the instance is still registered and it's rw aufs layer is still present. The instance must be in the STARTED state.
The instance switches to the STOPPING state, before switching back to the READY state.
.TP
.B LIST FOLDER
- List all the items in the folder FOLDER.
FOLDER is one of folders listed in an answer to a FOLDERS command.
.TP
.B PING
- Asks for the server to answer with a PONG notification.
.TP
.B PREPARE FOLDER IDENTIFICATION_STRING
- Creates an instance from a firmware, in the READY state, of create a firmware from an URL, a path to a final directory or a path to an ext2 image of a firmware.
If FOLDER equals to firmware, then IDENTIFICATION_STRING can be a path or an url in this case, the corresponding firmware will be retrieved using curl. It can also be a path to a final folder, a firmware will then be registered from this directory.
If FOLDER equals to instance, then IDENTIFICATION_STRING must be either a sha1 or a friendly name of a previously registered firmware. A new instance will then be created and registered from this firmware.
.TP
.B PROPERTIES FOLDER
- Asks the server to list the currently registered properties for the folder FOLDER.
.TP
.B QUIT
- Asks firmwared to exit.
.TP
.B REMOUNT INSTANCE_IDENTIFIER
- Asks to remount the union file system of an instance, to take into account modifications in the lower dir (e.g. rebuild of a final dir).
.TP
.B RESTART INSTANCE_IDENTIFIER
- fdc meta-command which performs kill, remount and start on an instance.
.TP
.B SET_PROPERTY FOLDER ENTITY_IDENTIFIER PROPERTY_NAME PROPERTY_VALUE
- Sets the value of the property PROPERTY to the value PROPERTY_VALUE, for the entity whose name or sha1 is ENTITY_IDENTIFIER from the folder FOLDER.
If the property is an array, append [i] to the property name to set the i-th item's value. If i is the index of a non nil element, it will be replaced, if i is the index after the last non-nil element, it will be stored in this position and the array will grow accordingly. If PROPERTY_VALUE is "nil", then the array will be truncated before the i-th index.
.TP
.B SHOW FOLDER IDENTIFIER
- Asks for all the information on a given entity of a folder.
.TP
.B START INSTANCE_IDENTIFIER
- Starts an previously prepared or stopped instance.
Launches an instance, which switches to the STARTED state and must be in the READY state.
.TP
.B VERSION
- Sends back informations concerning this firmwared program's version.
.\" @@@ FDC_COMMAND @@@
.\" END OF COMMANDS SECTION - autogenerated section, do not edit

.SH EXIT STATUS
.TP
.B 0
Success.
.TP
.B 1
A command-line error occurred.
.TP
.B 2
The command issued isn't known by
.BR fdc .
.TP
.B 3
Communication with
.B firmwared
timed out.

.SH ENVIRONMENT
.TP
.B V
If
.RB $ V
is set, then
.B fdc
will be run in verbose mode.
.TP
.B FDC_TIMEOUT
If
.RB $ FDC_TIMEOUT
is set, then it's value will be used by
.B fdc
for the timeout, in seconds, when trying to contact
.BR firmwared .
This value is ignored by the
.B PREPARE
command when applied to the
.B firmwares
folder.
.TP
.B FIRMWARED_SOCKET_PATH
If
.RB $ FIRMWARED_SOCKET_PATH
is set, then it's value will be used by
.B fdc
as the path to the socket to use for communicating with
.BR firmwared .

.SH EXAMPLES
.PP
List the firmwares registered in the
.B firmwared
repository, from which we will be able to prepare an instance:
.PP
.nf
.RS
$ fdc list firmwares
insidious_fionola[d6d41c4c5e51819e373c1ab8ed8813a2030c506a]
.RE
.fi
.PP
Prepare an instance from the
.B insidious_fionola
firmware:
.PP
.nf
.RS
$ fdc prepare insidious_fionola
new instance created
sha1: bdb3f0e4821b091229b48afd4f84c1f8ae7ab6f3
name: animistic_agnessa
.RE
.fi
.PP
Start the
.B animistic_agnessa
instance:
.PP
.nf
.RS
$ fdc start animistic_agnessa
animistic_agnessa started
.RE
.fi
.PP
Show some information about this instance:
.PP
.nf
.RS
$ fdc show instances animistic_agnessa
name: animistic_agnessa
sha1: bdb3f0e4821b091229b48afd4f84c1f8ae7ab6f3
id: 0
pid: 12444
state: started
firmware_path: /opt2/work/sphinx/firmwares//dragonfly-mykonos3_sim_pc.ext2.firmware
base_workspace: /opt2/work/sphinx/mount//bdb3f0e4821b091229b48afd4f84c1f8ae7ab6f3
pts: /dev/pts/9
firmware_sha1: d6d41c4c5e51819e373c1ab8ed8813a2030c506a
time: Mon Jun 1 09:56:46 2015
interface: eth0
.RE
.fi
.PP
Then you can interact with the instance with, e.g.
.BR parrotcom :
.PP
.nf
.RS
$ parrotcom /dev/pts/9
root@mykonos3board:/ # ls
bin                       home                      native-chroot-wrapper.sh  update
data                      lib                       native-wrapper.sh         usr
debugfs                   lib64                     proc                      var
dev                       lost+found                sbin
etc                       mnt                       sys
factory                   native-boxinit.sh         tmp
<Ctrl+\\>
.RE
.fi
.PP
Please note that
.B parrotcom
could have been launched as soon as the instance was prepared.
Then you can kill the instance:
.PP
.nf
.RS
$ fdc kill animistic_agnessa
animistic_agnessa killed
.RE
.fi
.PP
At this moment, the instance could be restarted if needed.
At last you can drop the instance, which will remove all it's execution
artifacts:
.PP
.nf
.RS
$ fdc drop instances animistic_agnessa
animistic_agnessa dropped
.RE
.fi
.PP

.SH AUTHORS
Written by Nicolas Carrier <nicolas.carrier@parrot.com>.

.SH SEE ALSO
.BR firmwared (1)
