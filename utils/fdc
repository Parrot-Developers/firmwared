#!/bin/bash

ERROR_TIMEOUT=3
ERROR_INVALID_COMMAND=2
ERROR_OTHER=1
ERROR_SUCCESS=0

set -e
set -u
if [ -n "${V+x}" ]
then
	set -x
fi

usage() {
	cat <<usage_here_document
Usage : fdc COMMAND [arguments_list]
	Command names are case-insensitive.
	The arguments_list depend on the commands used.
	Use 'fdc commands' to obtain the list of available commands.
	Use 'fdc help COMMAND' to get some help on a command COMMAND.
usage_here_document
}

on_exit() {
	status=$?
	case "${status}" in
		${ERROR_TIMEOUT})
			echo "Connection with firmwared timed out"
			;;
		${ERROR_INVALID_COMMAND})
			echo "Command \"${command}\" not found"
			usage
			;;
		${ERROR_OTHER})
			echo "Command-line error"
			usage
			;;
		${ERROR_SUCCESS})
			# nothing to be done
			;;
		*)
			echo "Failed with error "${status}
			usage
			;;
	esac
	if [ -n "${exit_command+x}" ]
	then
		${exit_command}
	fi
}

trap on_exit EXIT

timeout=${FDC_TIMEOUT:-2}

# the following trick checks if the variable is set. we can't test if it is
# empty, because the set -u will trigger an error
if [ -z "${FIRMWARED_SOCKET_PATH+x}" ]
then
	socket="/var/run/firmwared.sock"
else
	socket=${FIRMWARED_SOCKET_PATH}
fi

seq_num=$$

command=$(echo $1 | tr '[a-z]' '[A-Z]')

case "${command}" in
	PING)
		format="%s"
		args=""
		sed_command="s/.*STR:'\([^']*\)'.*/\1/g"
		;;
	FOLDERS)
		format="%s"
		args=""
		sed_command="s/.*STR:'FOLDERS', STR:'\([^']*\)'.*/\1/g"
		;;
	LIST)
		format="%s%s"
		folder=$2
		args="${folder}"
		sed_command="s/.*STR:'${folder}', U32:[0-9]*, STR:'\([^']*\)'.*/\1/g"
		;;
	SHOW)
		format="%s%s%s"
		folder=$2
		identifier=$3
		args="${folder} ${identifier}"
		sed_command="s/.*STR:'//g"
		;;
	DROP)
		format="%s%s%s"
		folder=$2
		identifier=$3
		args="${folder} ${identifier}"
		sed_command="s/.*/${identifier} dropped/g"
		;;
	PREPARE)
		format="%s%s%s"
		folder=$2
		if [ "${folder}" = "firmwares" ]; then
			timeout=-1
		fi
		identification_string=$3
		args="${folder} ${identification_string}"
		sed_command[0]="s#.*STR:'PREPARED', STR:'\([^']*\)', STR:'\([^']*\)', STR:'\([^']*\)'.*#new entity in \1 folder created\nsha1: \2\nname: \3#g"
		sed_command[1]="s#.*STR:'PREPARATION_PROGRESS', STR:'\([^']*\)', STR:'\([^']*\)', STR:'\([^']*\)'.*#\3% done$(echo -e '\033[1A\033[?25l')#g"
		exit_command="tput cnorm"
		;;
	START)
		format="%s%s"
		identifier=$2
		args="${identifier}"
		sed_command="s/.*/${identifier} started/g"
		;;
	KILL)
		format="%s%s"
		identifier=$2
		args="${identifier}"
		sed_command="s/.*/${identifier} killed/g"
		;;
	HELP)
		identifier=$(echo $2 | tr '[a-z]' '[A-Z]')
		if [ "${identifier}" = "RESTART" ]; then
			echo "Command RESTART"
			echo "Synopsis: RESTART INSTANCE_IDENTIFIER"
			echo "Overview: fdc meta-command which performs kill, \
remount and start on an instance."
			exit 0
		fi
		format="%s%s"
		args="${identifier}"
		sed_command="s/.*STR:'//g"
		;;
	VERSION)
		format="%s"
		args=""
		sed_command="s/.*STR:'//g"
		;;
	QUIT)
		format="%s"
		args=""
		sed_command="s/.*STR:'\([^']*\)'.*/firmwared said: \1/g"
		;;
	COMMANDS)
		format="%s"
		args=""
		sed_command="s/.*STR:'COMMANDS', STR:'\([^']*\)'.*/\1 RESTART/g"
		;;
	PROPERTIES)
		format="%s%s"
		folder=$2
		args="${folder}"
		sed_command="s/.*STR:'PROPERTIES', STR:'\([^']*\)'.*/\1/g"
		;;
	GET_PROPERTY)
		format="%s%s%s%s"
		folder=$2
		entity_identifier=$3
		property_name=$4
		args="${folder} ${entity_identifier} ${property_name}"
		sed_command="s/.*STR:'\([^']*\)'.*/\1/g"
		;;
	SET_PROPERTY)
		format="%s%s%s%s%s"
		folder=$2
		entity_identifier=$3
		property_name=$4
		property_value=$5
		args="${folder} ${entity_identifier} ${property_name} ${property_value}"
		sed_command="s/.*STR:'\([^']*\)'.*/\1/g"
		;;
	GET_CONFIG)
		format="%s%s"
		config_key=$2
		args="${config_key}"
		sed_command="s#.*STR:'[^']*', STR:'\([^']*\)', STR:'\([^']*\)'.*#\2#g"
		;;
	CONFIG_KEYS)
		format="%s"
		args=""
		sed_command="s/.*STR:'CONFIG_KEYS', STR:'\([^']*\)'.*/\1/g"
		;;
	REMOUNT)
		format="%s%s"
		identifier=$2
		args="${identifier}"
		sed_command="s/.*/${identifier} remounted/g"
		;;
# upper level commands
	RESTART)
		identifier=$2
		fdc kill $identifier || true
		fdc remount $identifier
		fdc start $identifier
		exit 0
		;;
	*)
		exit ${ERROR_INVALID_COMMAND}
		;;
esac

pomp_cmd="pomp-cli --timeout ${timeout} --dump --wait ${seq_num} unix:${socket}"

${pomp_cmd} ${seq_num} ${format} ${command} ${args} 2>&1 | while read line
do
	if [ -n "$(echo ${line} | grep 'POMPCLI: event_cb :')" ];
	then
		continue
	fi
	if [ -n "$(echo ${line} | grep 'POMPCLI: Timeout !')" ];
	then
		exit ${ERROR_TIMEOUT}
	fi
	if [ -n "$(echo ${line} | grep 'STR:.ERROR.')" ];
	then
		sed_command="s/.*STR:'\([^']*\)'}/firmwared error: \1/g"
	fi
	echo ${line} | sed "${sed_command[0]}" | sed "${sed_command[1]-s/ / /}" | sed "s/'}$//g" | egrep -v '^[[:space:]]*$' || true
done
