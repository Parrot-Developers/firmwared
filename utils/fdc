#!/bin/bash

ERROR_TIMEOUT=3
ERROR_INVALID_COMMAND=2
ERROR_OTHER=1
ERROR_SUCCESS=0

set -e
set -u
if [ -n "${V+x}" ]
then
	set -x
fi

# libfwd can be executed to retrieve the mapping between commands and their
# expected completion answers
# the problem here is to know where the libfwd.so is located, because it can be
# installed in common paths or in a final dir of a workspace.
# the latter case forces us to use the following trick to take into account the
# LD_LIBRARY_PATH so that the good libfwd.so can be choosen
find_libfwd_path () {
	local firmwared=$(which firmwared)
	# find the elf interpreter to which we will ask the path to libfwd.so
	local interpreter=$(readelf -l ${firmwared} | sed 's/\]//g;
		/Requesting program interpreter/!d;
		s/.*Requesting program interpreter: \([^\]]*\)/\1/g')

	# ask the loader to list all the dependencies
	# preloading libfwd.so will force it into the dependencies list, even if
	# the current interpreter (namely, bash) doesn't use it
	libfwd=$(LD_PRELOAD=libfwd.so $interpreter \
		--list  ${firmwared} | sed '/libfwd.so/!d; s/.*=> \(.*\) .*/\1/g')
}

usage() {
	cat <<usage_here_document
Usage : fdc COMMAND [arguments_list]
	Command names are case-insensitive.
	The arguments_list depend on the commands used.
	Use 'fdc commands' to obtain the list of available commands.
	Use 'fdc help COMMAND' to get some help on a command COMMAND.
usage_here_document
}

on_exit() {
	status=$?
	case "${status}" in
		${ERROR_TIMEOUT})
			echo "Connection with firmwared timed out"
			;;
		${ERROR_INVALID_COMMAND})
			echo "Command \"${command}\" not found"
			usage
			;;
		${ERROR_OTHER})
			echo "Command-line error"
			usage
			;;
		${ERROR_SUCCESS})
			# nothing to be done
			;;
		*)
			if [ "${status}" -le 128 ]; then
				echo "Failed with error "${status}
				usage
			fi # no else since we use signalling internally
			;;
	esac
	if [ -n "${exit_command+x}" ]
	then
		${exit_command}
	fi
}

trap on_exit EXIT

timeout=${FDC_TIMEOUT:-2}

# the following trick checks if the variable is set. we can't test if it is
# empty, because the set -u will trigger an error
if [ -z "${FIRMWARED_SOCKET_PATH+x}" ]
then
	socket="/var/run/firmwared.sock"
else
	socket=${FIRMWARED_SOCKET_PATH}
fi

seqnum=$$

command=$(echo $1 | tr '[a-z]' '[A-Z]')
find_libfwd_path
cmd_id=$(LIBFWD_MESSAGE=${command} ${libfwd})
ans_id=$(LIBFWD_GET_ANSWER_ID= LIBFWD_MESSAGE=${command} ${libfwd})
err_id=$(LIBFWD_MESSAGE=ERROR ${libfwd})
format=$(LIBFWD_GET_MESSAGE_FORMAT= LIBFWD_MESSAGE=${command} ${libfwd})
# order shall match enum fwd_message
case "${command}" in
	COMMANDS)
		args=""
		sed_command="s/.*STR:'\([^']*\)'.*/\1 RESTART/g"
		;;
	CONFIG_KEYS)
		args=""
		sed_command="s/.*ID:${ans_id}.*STR:'\([^']*\)'.*/\1/g"
		;;
	DROP)
		folder=$2
		identifier=$3
		args="${folder} ${identifier}"
		sed_command="s/.*/${identifier} dropped/g"
		;;
	FOLDERS)
		args=""
		sed_command="s/.*STR:'\([^']*\)'.*/\1/g"
		;;
	GET_CONFIG)
		config_key=$2
		args="${config_key}"
		sed_command="s#.*STR:'[^']*', STR:'\([^']*\)'.*#\1#g"
		;;
	GET_PROPERTY)
		folder=$2
		entity_identifier=$3
		property_name=$4
		args="${folder} ${entity_identifier} ${property_name}"
		sed_command="s/.*STR:'\([^']*\)'.*/\1/g"
		;;
	HELP)
		identifier=$(echo $2 | tr '[a-z]' '[A-Z]')
		if [ "${identifier}" = "RESTART" ]; then
			echo "Command RESTART"
			echo "Synopsis: RESTART INSTANCE_IDENTIFIER"
			echo "Overview: fdc meta-command which performs kill, \
remount and start on an instance."
			exit 0
		fi
		args="${identifier}"
		sed_command="s/.*STR:'//g"
		;;
	KILL)
		format="%u%s"
		identifier=$2
		args="${identifier}"
		sed_command="s/.*/${identifier} killed/g"
		;;
	LIST)
		folder=$2
		args="${folder}"
		sed_command="s/.*STR:'${folder}', U32:[0-9]*, STR:'\([^']*\)'.*/\1/g"
		;;
	PING)
		args=""
		sed_command="s/.*/PONG/g"
		;;
	PREPARE)
		folder=$2
		if [ "${folder}" = "firmwares" ]; then
			timeout=-1
			exit_command="tput cnorm"
		fi
		identification_string=$3
		args="${folder} ${identification_string}"
		sed_command[0]="s#.*ID:${ans_id}.*STR:'\([^']*\)', STR:'\([^']*\)', STR:'\([^']*\)'.*#new entity in \1 folder created\nsha1: \2\nname: \3#g"
		sed_command[1]="s#.*STR:'\([^']*\)', STR:'\([^']*\)', STR:'\([^']*\)'.*#\3% done$(echo -e '\033[1A\033[?25l')#g"
		;;
	PROPERTIES)
		folder=$2
		args="${folder}"
		sed_command="s/.*STR:'\([^']*\)'[^']*/\1/g"
		;;
	QUIT)
		args=""
		sed_command="s/.*ID:${ans_id}.*/firmwared said bye bye/g"
		;;
	REMOUNT)
		format="%u%s"
		identifier=$2
		args="${identifier}"
		sed_command="s/.*/${identifier} remounted/g"
		;;
	RESTART)
		identifier=$2
		fdc kill $identifier || true
		fdc remount $identifier
		fdc start $identifier
		exit 0
		;;
	SET_PROPERTY)
		folder=$2
		entity_identifier=$3
		property_name=$4
		property_value=$5
		args="${folder} ${entity_identifier} ${property_name} ${property_value}"
		sed_command="s/.*STR:'\([^']*\)'.*/\1/g"
		;;
	SHOW)
		folder=$2
		identifier=$3
		args="${folder} ${identifier}"
		sed_command="s/.*STR:'//g"
		;;
	START)
		format="%u%s"
		identifier=$2
		args="${identifier}"
		sed_command="s/.*/${identifier} started/g"
		;;
# upper level commands
	VERSION)
		args=""
		sed_command="s/.*STR:'//g"
		;;
	*)
		exit ${ERROR_INVALID_COMMAND}
		;;
esac

pomp_cmd="pomp-cli --timeout ${timeout} --dump --wait ${ans_id} unix:${socket}"

exec ${pomp_cmd} ${cmd_id} ${format} ${seqnum} ${args} 2>&1 | while read line
do
	if [ -n "$(echo ${line} | grep 'POMPCLI: event_cb :')" ];
	then
		continue
	fi
	if [ -n "$(echo ${line} | grep 'POMPCLI: Timeout !')" ];
	then
		exit ${ERROR_TIMEOUT}
	fi
	if [ -n "$(echo ${line} | grep 'ID:'${err_id})" ];
	then
		echo ${line} | sed "s#.*'\([^']*\)'.*#firmwared error: \1#g"
		kill -INT $(ps --ppid $seqnum -o pid h)
		exit ${ERROR_OTHER}
	fi
	echo ${line} | sed "${sed_command[0]}" | sed "${sed_command[1]-s/ / /}" | sed "s/'}$//g" | egrep -v '^[[:space:]]*$' || true
done
