#!/bin/bash

set -e
set -u

verbose=$5

if [ "${verbose}" = "y" ]; then
	set -x
fi

action=$1
url=$2
firmware_repository=$3
uuid=$4

# use option "insecure" to accept HTTPS connection with unverified certificat
curl_command="curl --location --silent --insecure"

export LANG=C

# accept path without the file:// prefix /!\ it must be an absolute path
if [ -f "${url}" ]; then
	url="file://${url}"
fi

if [ "${action}" = "uuid" ]; then
	tmp_file=$(mktemp --tmpdir=${firmware_repository})
	${curl_command} ${url} --output ${tmp_file} --range 0-2047
	uuid=$(blkid -c /dev/null -o value -s UUID ${tmp_file})
	rm -f ${tmp_file}

	echo "uuid=${uuid}"
elif [ "${action}" = "fetch" ]; then
	# retrieve the size of the file
    # note: tail is used to cope with potential redirection(s)
	size=$(${curl_command} --head ${url} |grep Content-Length| tail -n 1)
	size=${size##*Content-Length: }
	size=${size%%[[:space:]]*}

	file=${url##*/}
	dest="${firmware_repository}/${file}.${uuid}.firmware"

	if [ -e "${dest}" ]; then
		echo "firmware already exist" > /dev/stderr
	fi

	${curl_command} ${url} --output - | pv --numeric --size ${size} 2>&1 > "${dest}"
	echo "destination_file=${dest##*/}"
	# in order to get sure the curl.hook has the time to echo the destination
	# file path and firmwared has the time to read it, we sleep an infinite
	# amount of time. firmwared will kill the process with SIGUSR1 when ready
	sleep 4294967295
fi

exit 0
