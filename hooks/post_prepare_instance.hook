#!/usr/bin/env python

"""Hook invoked right after preparing the instance
"""

import sys, os, logging
import subprocess
import ctypes
import shutil

sys.path.append('/usr/lib/Alchemy/scripts/')
import checkdyndeps

def libpath(clib):
    """Get path to library
    """
    path = subprocess.check_output("ldconfig -p | grep %s" % clib._name,
                                   shell=True)
    path = path.split("\n")[0]
    path = path.split(" => ")[1]
    return path

def read_whitelist(root_dir):
    """Read list of binaries to check for missing dependencies
    """
    filepaths = []
    filepath = os.path.join(root_dir, "data", "alchemy_nocheck")
    try:
        with open(filepath, "r") as f:
            filepaths = [os.path.join(root_dir, line[:-1]) for line in f \
                    if line[0] != "#"]
    except IOError as ex:
        logging.error("Failed to open file: %s ([err=%d] %s)",
                      filepath, ex.errno, ex.strerror)
    return filepaths

def copy_missing_libs(root_dir):
    """Copy missing libraries in given directory
    """
    lib_dir = os.path.join(root_dir, "usr", "lib")
    filepaths = read_whitelist(root_dir)

    while filepaths:

        # Process ELF files
        ctx = checkdyndeps.Context()
        for filepath in filepaths:
            if not checkdyndeps.isElf(filepath):
                continue
            checkdyndeps.processFile(ctx, filepath)

        # Determine missing libraries
        for (_, _, filenames) in os.walk(root_dir):
            for filename in filenames:
                if filename in ctx.libraries:
                    ctx.libraries[filename] = True

        # Display and copy missing libraries
        filepaths = []
        for lib in ctx.libraries:
            if not ctx.libraries[lib]:
                # Find library in file system
                try:
                    clib = ctypes.cdll.LoadLibrary(lib)
                except OSError:
                    # Only display the first binary that needs the library
                    needed_by = None
                    for binary in ctx.binaries:
                        if lib in ctx.binaries[binary]:
                            needed_by = binary
                            break
                    logging.warning("Missing library: '%s' needed by %s", lib,
                                    needed_by)
                    continue

                # Get path to library
                path = libpath(clib)

                # Copy library to /usr/lib in given root directory
                if os.path.islink(path):
                    linkto = os.path.realpath(path)
                    logging.info("Copying file: '%s' to '%s'", linkto, lib_dir)
                    shutil.copy(linkto, lib_dir)
                    linkpath = os.path.join(lib_dir, os.path.basename(path))
                    linksource = os.path.basename(linkto)
                    logging.info("Creating symlink: '%s' pointing to '%s'",
                                 linkpath, linksource)
                    os.symlink(linksource, linkpath)
                    filepaths.append(os.path.join(lib_dir, linksource))
                else:
                    logging.info("Copying file: '%s' to '%s'", path, lib_dir)
                    shutil.copy(path, lib_dir)
                    filepaths.append(os.path.join(lib_dir,
                                                  os.path.basename(path)))

def fix_stat(root_dir, firmware_dir):
    """Fix native final tree ownership/permissions
    """
    # Create list of files in given root directory
    filepaths = []
    for (dirpath, _, filenames) in os.walk(root_dir):
        for filename in filenames:
            filepaths.append(os.path.relpath(os.path.join(dirpath, filename),
                                             root_dir))

    # Uses the fixstat.sh script to change the owner and permissions of all the
    # files in the union fs of an instance.
    # Designed to be used as the value of the post_prepare_instance_hook config
    # key.
    os.chdir(root_dir)
    cmdline = os.path.join(firmware_dir, "..", "fixstat.sh")
    try:
        process = subprocess.Popen(cmdline, stdin=subprocess.PIPE,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE,
                                   shell=True)
        lines = process.communicate(input="\n".join(filepaths))[0]
        for line in lines.split("\n")[:-1]:
            # tokenize the line at each semicolon
            cols = line.split(";")

            # remove the "blabla=" prefixes
            cols = [cols[0]] + [c.split("=")[1] for c in cols[1:]]

            # in mode, only the last 3 digits are meaningful
            cols[1] = cols[1][-3:]

            # the parsing is done, now apply
            filepath = os.path.join(root_dir, cols[0])
            if not os.path.islink(filepath):
                logging.info("chmod '%s' '%s'", cols[1], filepath)
                os.chmod(filepath, int(cols[1]))
            logging.info("chown --no-dereference %s:%s %s", cols[2], cols[3],
                         filepath)
            os.lchown(filepath, int(cols[2]), int(cols[3]))
        process.stdin.close()
        if process.returncode != 0:
            logging.error("%s failed with status %d", cmdline,
                          process.returncode)
    except OSError as ex:
        logging.error("Failed to execute command: %s [err=%d %s]",
                      cmdline, ex.errno, ex.strerror)

def main():
    """Main function
    """
    if len(sys.argv) < 2:
        sys.stderr.write("No root path given\n")
        sys.exit(1)
    root_dir = sys.argv[1]

    if len(sys.argv) < 3:
        sys.stderr.write("No firmware path given\n")
        sys.exit(1)
    firmware_dir = sys.argv[2]

    if len(sys.argv) < 4:
        sys.stderr.write("No verbose given\n")
        sys.exit(1)
    setupLog(sys.argv[3])

    copy_missing_libs(root_dir)
    fix_stat(root_dir, firmware_dir)

def setupLog(verbose):
    """Setup logging system
    """
    logging.basicConfig(
        level=logging.WARNING,
        format="[%(levelname)s] %(message)s",
        stream=sys.stderr)
    logging.addLevelName(logging.CRITICAL, "C")
    logging.addLevelName(logging.ERROR, "E")
    logging.addLevelName(logging.WARNING, "W")
    logging.addLevelName(logging.INFO, "I")
    logging.addLevelName(logging.DEBUG, "D")

    # setup log level
    if verbose == "y":
        logging.getLogger().setLevel(logging.DEBUG)

if __name__ == "__main__":
    main()
