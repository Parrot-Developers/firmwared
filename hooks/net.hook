#!/bin/bash

set -e

action=$1		# one of create, assign or config
instance_interface=$2	# e.g. eth0, interface seen in the container
# another optional interface to assign to the container's netns. It can contain
# up to 3 values, the first one is the name of the interface to steal, the
# second is the name it must after being assigned to the instance's netns and
# the last one is the IP address it must have before the instance is started
OLDIFS=${IFS}
IFS=:
stolen_interface_configuration=($3)
IFS=$OLDIFS
stolen_btusb_id=$4

host_interface_base=$5	# e.g. fd_veth_peer, base for building host's end name
instance_id=$6		# e.g. 0, 1, ...
ip_base=$7		# e.g. 10.202., ~ first two bytes of IP
net_bits=$8		# number of bits of an IP's network part
netns=$9		# normally, pid (in host ns) of the pid 1 (in container)
verbose=$10

if [ "${verbose}" = "y" ]; then
	set -x
fi

set -u

# the script doesn't handle values for net_bits other than 24, as it would add
# too much complexity
test $net_bits -eq 24

host_iface=${host_interface_base}${instance_id}
host_addr=${ip_base}${instance_id}.254/${net_bits}
cont_temp_iface=fd_veth_peer${instance_id}
cont_addr=${ip_base}${instance_id}.1/${net_bits}

stolen_interface=${stolen_interface_configuration[0]:-}
target_name=${stolen_interface_configuration[1]:-}
stolen_interface_ip=${stolen_interface_configuration[2]:-}

if [ "${action}" = "create" ];
then
	ip link add ${host_iface} type veth peer name ${cont_temp_iface}
	ip address add ${host_addr} dev ${host_iface}
	ip link set ${host_iface} up
elif [ "${action}" = "assign" ];
then
	ip link set ${cont_temp_iface} netns ${netns}
	if [ -n "${stolen_interface}" ]; then
		phy80211_dir=/sys/class/net/${stolen_interface}/phy80211/
		phy_file=${phy80211_dir}index
		if [ -e "${phy_file}" ]; then
			# wifi interface
			mapfile < ${phy_file} phy
			# attempt to enable if rfkilled
			echo 0 > ${phy80211_dir}/rfkill*/soft || true
			iw phy#${phy} set netns ${netns}
		else
			# non wifi interface
			ip link set ${stolen_interface} netns ${netns}
		fi
	fi
	if [ -n "${stolen_btusb_id}" ]; then
		# unbind the bluetooth usb device from the btusb driver so that the
		# instance can manage it
		echo ${stolen_btusb_id} > "/sys/bus/usb/drivers/btusb/unbind"
	fi
elif [ "${action}" = "config" ];
then
	ip link set ${cont_temp_iface} name ${instance_interface}
	ip address add ${cont_addr} dev ${instance_interface}
	ip link set ${instance_interface} up
	if [ -n "${stolen_interface}" ]; then
		if [ "${target_name}" != "${stolen_interface}" ]; then
			ip link set ${stolen_interface} name ${target_name}
		fi
		if [ -n "${stolen_interface_ip}" ]; then
			ip address add ${stolen_interface_ip} dev \
					${target_name}
		fi
	fi
elif [ "${action}" = "clean" ];
then
	if [ -n "${stolen_btusb_id}" ]; then
		# bind the bluetooth usb device to the btusb driver, only if we know
		# it's id, if not, then it must not be bound
		echo ${stolen_btusb_id} > "/sys/bus/usb/drivers/btusb/bind"
	fi
else
	echo "wrong action string \"$action\""
	exit 1
fi
