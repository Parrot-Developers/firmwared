#!/bin/sh

set -e

action=$1
base_workspace=$2
ro_mount_point=$3
rw_dir=$4
union_mount_point=$5
x11_path=$6
x11_mount_point=$7
nvidia_path=$8
nvidia_mount_point=$9
firmware=$10
sha1=$11
only_unregister=$12
prevent_removal=$13
verbose=$14

if [ "${verbose}" = "y" ]; then
	set -x
fi

workdir=${base_workspace}/workdir

if [ "${action}" = "init" ];
then
	# create mount points
	mkdir -p ${ro_mount_point} ${rw_dir} ${union_mount_point} ${workdir}

	# mount the ro layer and remount it with a rw layer on top
	if [ -d "${firmware}" ];
	then
		mount --bind ${firmware} ${ro_mount_point}
		# The remount is necessary to make this bind mount read-only.
		# Trying to pass the ro option directly to the previous command
		# won't work, according to the man page, the mount options of
		# the bind mount will be the same as those of the original
		# mount.
		mount -o ro,remount,bind ${firmware} ${ro_mount_point}
	else
		mount -o ro,loop ${firmware} ${ro_mount_point}
	fi
	mount -t overlay -o \
		lowerdir=${ro_mount_point},upperdir=${rw_dir},workdir=${workdir} \
		firmwared_${sha1} ${union_mount_point}

	# create X11 mount point
    mkdir -p ${x11_mount_point}

	# mount the X11 path
	if [ -d "${x11_path}" ];
	then
		mount -o ro --bind ${x11_path} ${x11_mount_point}
	else
		mount -o ro,loop ${x11_path} ${x11_mount_point}
	fi

	# create NVIDIA mount point
    mkdir -p ${nvidia_mount_point}

	# mount the NVIDIA path
	if [ -d "${nvidia_path}" ];
	then
		mount -o ro --bind ${nvidia_path} ${nvidia_mount_point}
	else
		mount -o ro,loop ${nvidia_path} ${nvidia_mount_point}
	fi

elif [ "${action}" = "remount" ];
then
	mount -oremount ${union_mount_point}
elif [ "${action}" = "clean" ];
then
	# unmount
	umount ${x11_mount_point} ${union_mount_point} ${ro_mount_point}
	# optionally remove the artifacts
	if [ ! "${prevent_removal}" = "y" ];
	then
		if [ "${only_unregister}" = "false" ];
		then
			rm -rf ${base_workspace}
		fi
	fi
else
	echo "wrong action string \"$action\""
	exit 1
fi
